version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    environment:
      POSTGRES_DB: n8n_manage_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n_network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: n8n_backend
    ports:
      - "1337:1337"
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=n8n_manage_system
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - JWT_SECRET=n8n_jwt_secret_key_2024
      - APP_KEYS=n8n_app_key_1,n8n_app_key_2,n8n_app_key_3,n8n_app_key_4
      - API_TOKEN_SALT=n8n_api_token_salt_2024
      - ADMIN_JWT_SECRET=n8n_admin_jwt_secret_2024
      - HOST=0.0.0.0
      - PORT=1337
      - NODE_ENV=development
      - CORS_ORIGIN=http://localhost:3000
      - CORS_CREDENTIALS=true
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/public/uploads
    networks:
      - n8n_network
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: n8n_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:1337
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_AUTH_TOKEN_KEY=n8n_auth_token
      - NODE_ENV=development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - n8n_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  n8n_network:
    driver: bridge
